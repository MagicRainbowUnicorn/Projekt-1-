=== Projektidee MagicRainbowUnicorn, 2016-04-18 ===

++Projektidee++ : HammerHead

In meinem Projekt möchte ich ein einfaches Jump'n'Run Spiel umsetzen. 
Es soll einen Helden geben, der sich seitlich durch die Spielwelt bewegen kann und dabei Wellen von Gegnern bekämpfen muss.

++Interaktion++

- Es gibt eine Log-In Maske
	- Der Spieler muss einen Namen wählen und ein Passwort vergeben	(2 Felder)
		- Die Eingabe muss bestätigt werden ("OK"- Button)
		- Die Eingabe kann abgebrochen werden("Abrechen"-Button)
		- Für bestehende Accounts gibt es einen "Log-In"- Button

- Der Spielen kann seinen Charakter individuell darstellen
	- Es soll ein Untermenü mit "Aussehen-verändern"-Button geben
	- Es soll ein "Farben-ändern"-Button geben

- Der Spieler kann seinen Helden durch die Spielwelt bewegen
	- Der Held soll nach links navigiert werden können ("Links"-Button)
	- Der Held soll nach rechts navigiert werden können ("Rechts"-Button)
	- Der Held soll springen können ("Jump"-Button)
	- Der Held soll seine Waffe einsetzen können ("Fight"-Button)

- Das Spiel soll jederzeit beendet, bzw. zwischengespeichert werden können
	- Es gibt einen "Spiel beenden"- Button
	- Es gibt einen "Spiel speichern"-Button

- Es gibt einen "Menü"- Button 
	- Hier soll es ein "Lautstärke"- Button geben 
	- es soll ein "Grafik-anpassen"- Button geben
	- es soll weitere "Buttons" für speichern und beenden geben - s.o.


++Darstellung++

- Die Spielwelt:
	- Die Spielwelt ist in 2D seitlich dargestellt
	- Das Spiel startet bei Level 1 und endet bei Level 50
	- Jedes Level ist ähnlich gestaltet, jeweils mit anderen Hintergründen
	- Die Level werden nach rechts-gehend durchlaufen 
	- Es kommen Wellen von Gegnern (Zombies) von vorne und hinten
	- In jedem Level wird die Gegnerzahl erhöht / schwierieger
	

- Der Held:
	- Der Held hat nur eine Waffe (einen überdimensionalen Hammer)
	- Er hat eine einfarbige Kleidung an, die über den User angepasst werden kann 
	- Er kann vom User nach rechts und links durch die Spielwelt bewegt werden

- Kampf:
	- Der Held besiegt einen Gegner, in dem er seinen Hammer auf den Kopf des Gegners schwingt 
	- schwerere Gegner müssen durch ein Sprung verbunden mit einem Schlag besiegt werden

- Die Gegner:
	- die Gegner sind Zombies, die zuerst langsam und dann immer schneller von links und rechts auf den Helden zuströmen
	- einige Gegner lassen, wenn sie besiegt werden, bestimmte Power-Ups fallen
	
- Power-ups:
	- es gibt Herzen, die das Leben des Helden auffüllen
	- es gibt Schilde (vorübergehender Schutz des Helden vor Gegnern)
	- es gibt einen "Boost" (der Held kann sich kurzfristig schneller bewegen und ist stärker)

- Speicherpunkte:
	- Die Speicherpunkte sind an bestimmten Stellen in jedem Level platziert
	- wenn der Held stirbt, muss der User das Level nicht von vorne beginnen, sondern kann beim letzten Speicherpunkt einsteigen




=== Projektidee MagicRaindboUnicorn, 2016-04-14 ===

Ich habe noch keine Idee.

=== Feedback Alpers, 2016-04-14 ===

Kein Problem. Dann formulieren Sie bitte für das folgende Brettspiel eine Projektbeschreibung wie in Kap. 5 beschrieben und arbeiten Sie damit weiter: Cluedo http://www.brettspiele-report.de/cluedo/

=== Zweiter Aufgabenblock (identisch für alle Studierenden) ===

Sie haben jetzt gezeigt, dass Sie einfache Arbeiten mit einem Git-Repository beherrschen.
Als Teil der letzten Aufgabe sollten Sie beschreiben, was Ihre Anwendung tun soll, also was für Funktionalitäten Ihre Anwendung bieten soll.
Wenn Sie hier nichts angegeben haben, dann werde ich Ihnen einen Vorschlag hochladen, mit dem Sie weiterarbeiten können.
In der Veranstaltung haben Sie außerdem gelernt, was Markup Languages sind.

Die nächste Aufgabe besteht aus den folgenden Teilen:

1.) Lesen Sie mein Feedback durch und setzen Sie die beschriebenen Aufgaben um.

Für die folgende Aufgabe sollten Sie mindestens eine halbe Stunde investieren. Zwei Stunden wäre aber etwas zu viel des guten.
Bearbeiten Sie die Aufgaben 2. und 3. bitte innerhalb von 48 Stunden, weil andere Studierende davon abhängen, dass Sie sie beendet haben.
Bearbeiten Sie die Aufgaben auf jeden Fall in der vorgegebenen Reihenfolge.
Und bearbeiten Sie eine Aufgabe nicht nachträglich nochmal. (Wenn Sie also z.B. Aufgabe 3. bearbeiten, dann ändern Sie bitte nichts an Aufgabe 1. nachträglich ab. Dafür wird später noch genug Zeit sein.)

2.) Bennen Sie die strukturellen Elemente, aus denen Ihre Anwendung bestehen soll.
Es ist dabei egal, ob es diese Elemente in HTML gibt.
Es ist auch egal, ob Sie sich schon in HTML eingearbeitet haben.
Wichtig ist nur, dass Sie die strukturellen Elemente benennen, aus der die Anwendung bestehen soll.
Speichern Sie diese Aufstellung als HTML-Kommentar in einer Datei mit dem Namen

strukt.html

, die Sie in Ihrem Repository abspeichern. Wichtig: Die Datei soll nicht im Unterverzeichnis Dokumentation des Repositories gespeichert werden, weil sie die Basis für das erste HTML-Dokument werden wird.

Wenn Sie noch unsicher sind: Strukturelle Elemente können alles mögliche sein:
- Tabellen
- Listen
- Schaltflächen
- Textfelder
- Bildbereiche
- Hintergrundmusik
- Absätze
- ...

In anderen Worten: Ein strukturelles Element ist etwas, das ein abgegrenzter Teil der Anwendung ist.
Notieren Sie kurz, welche Funktion jedes der von Ihnen genannten Elemente haben soll.

Hier einige Beispiele:
- Schaltfläche (Nutzer können per Klick bestätigen, dass eine Eingabe abgeschickt werden soll.)
- Textfeld für Namen (Nutzer können Ihren Nachnamen eintragen.)
- Log-In-Maske (Bereich, in dem Nutzer sich einloggen können.)
- - Teile der Log-In-Maske:
- - Textfeld für Username
- - Textfeld, das die Eingabe nicht anzeigt, fürs Passwort
- Tabelle, 7 x 5 Felder (Jedes Feld soll ein Bild anzeigen, das ein Feld des Spielbretts ist. Wenn Nutzer ein Feld anwählen, soll ein Menü erscheinen.)
- - Menü für jedes Feld der Tabelle mit Texteinträgen (Eintrag für "Gebäude abreißen", "Feld kaufen")
- Hintergrundbild (Hier sollen einzelne Bilder als Diashow eingeblendet werden.)
- Werbebanner
- Schaltfläche für die Maskierung von NSFW (NSFW = Not safe for work)(NutzerInnen können über diese Schaltfläche eine andere Anwendung in der Vordergrund einblenden lassen, damit der Chef nicht sieht, dass sie gerade spielen.)

3.) Schauen Sie jetzt in der Liste der Repositories (nicht in der Tabelle der Accounts) nach, welche zehn Repositories vor und nach Ihrem Repository aufgeführt sind und geben Sie den Besitzern dieser Repositories Zugriffsrechte auf Ihr Repository.

Bsp.: Sie haben das Repository BerndStromberg. Dann folgen die zehn Repositories der Nutzer BlackWolf63, Cantinaband, CaptainWeasle, ColePfeiffer, CurvLietzau,
DangerDulf, dnbdel, Domsche, Eldinox und Eupuco und vor Ihnen gibt es die fünf Repositories der Nutzer 2238867, amelie-beh, Anger21, anita1997 und Asphalon. all diesen Accounts geben Sie jetzt Zugriffsrechte auf Ihr Repository, so wie Sie das schon für mich getan haben. Wenn Sie, wie BerndStrommberg zu weit am Anfang der Liste stehen (hier gibt es ja nur fünf andere Accounts bis zum Anfang der Liste), dann geben Sie zusätzlich noch den Besitzern der letzten fünf Repositories Zugriffsrechte. Es sollten insgesamt 20 Accounts Zugriffsrecht haben.

Für die nächsten zwei Aufgaben sollten Sie pro Repository zwischen zehn Minuten und einer Stunde aufwenden. Weniger ist zu wenig und mehr ist zu viel.
Beachten Sie dabei bitte, dass Sie hier letzten Endes Kritik an der Arbeit eines/einer anderen üben und das einige von Ihnen noch nie programmiert haben. Arbeiten Sie deshalb bitte daran, alles, was Sie ergänzen so neutral und höflich wie möglich zu formulieren, denn Unwissenheit und mangelndes Verständnis fürs Programmieren sind eben nicht das selbe wie Dummheit oder Faulheit.

Bitte erledigen Sie diese Aufgaben innerhalb der nächsten sieben Tage.

4.) Als nächstes greifen Sie auf die nach Ihrem Repository nachfolgenden fünf Repositories zu und bearbeiten hier die folgende Aufgabe. (Hier hängen Sie also davon ab, dass andere Kommilitonen Aufgabe 3. erledigt haben.) 

Lesen Sie sich die Projektidee durch und machen Sie sich ähnlich wie bei 2. einfache Stichpunkte über strukturelle Elemente, die Sie bei dieser Projektidee sinnvoll finden. (Hier erstmal nur Stichpunkte, Details arbeiten Sie unter 5. aus.)

5.) Öffnen Sie jetzt die Datei strukt.html des Repositories, das Sie gerade bearbeiten. Ergänzen Sie Elemente, die Sie unter 4. notiert haben und die noch nicht eingetragen sind in der unter 2. beschriebenen Form.

Abschließender Hinweis zu 4. und 5.:

Auch wenn das nirgends explizit steht sollen Sie Änderungen in das Repository pushen, aus dem sie die Datei strukt.html gepullt haben.
Es ist dabei sehr wahrscheinlich, dass Sie (vielleicht auch erst später während der Projektbearbeitung) einen merge durchführen müssen. Wenn Sie sich noch nicht angesehen haben, wie das geht, dann tun Sie es jetzt.

Viele Grüße,
Markus Alpers